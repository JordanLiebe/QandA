{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jordan.Liebe\\\\Repos\\\\QandA\\\\frontend\\\\src\\\\Form.tsx\";\nimport { useState, createContext } from 'react';\nimport { PrimaryButton, gray5, gray6 } from './Styles';\n/** @jsx jsx */\n\nimport { css, jsx } from '@emotion/core';\nexport const FormContext = createContext({\n  values: {},\n  errors: {},\n  touched: {}\n});\nexport const required = value => value === undefined || value === null || value === '' ? 'This must be populated' : '';\nexport const minLength = (value, length) => value && value.length < length ? `This must be at least ${length} characters` : '';\nexport const Form = ({\n  submitCaption,\n  children,\n  validationRules\n}) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [touched, setTouched] = useState({});\n\n  const validate = fieldName => {\n    if (!validationRules) {\n      return [];\n    }\n\n    if (!validationRules[fieldName]) {\n      return [];\n    }\n\n    const rules = Array.isArray(validationRules[fieldName]) ? validationRules[fieldName] : [validationRules[fieldName]];\n    const fieldErrors = [];\n    rules.forEach(rule => {\n      const error = rule.validator(values[fieldName], rule.arg);\n\n      if (error) {\n        fieldErrors.push(error);\n      }\n    });\n    const newErrors = { ...errors,\n      [fieldName]: fieldErrors\n    };\n    setErrors(newErrors);\n    return fieldErrors;\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (validateForm()) {}\n  };\n\n  return jsx(FormContext.Provider, {\n    value: {\n      values,\n      setValue: (fieldName, value) => {\n        setValues({ ...values,\n          [fieldName]: value\n        });\n      },\n      errors,\n      validate,\n      touched,\n      setTouched: fieldName => {\n        setTouched({ ...touched,\n          [fieldName]: true\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, jsx(\"form\", {\n    noValidate: true,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, jsx(\"fieldset\", {\n    css: css`\n            margin: 10px auto 0 auto;\n            padding: 30px;\n            width: 350px;\n            background-color: ${gray6};\n            border-radius: 4px;\n            border: 1px solid ${gray5};\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n          `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, children, jsx(\"div\", {\n    css: css`\n              margin: 30px 0px 0px 0px;\n              padding: 20px 0px 0px 0px;\n              border-top: 1px solid ${gray5};\n            `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, jsx(PrimaryButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, submitCaption)))));\n};","map":{"version":3,"sources":["C:/Users/Jordan.Liebe/Repos/QandA/frontend/src/Form.tsx"],"names":["useState","createContext","PrimaryButton","gray5","gray6","css","jsx","FormContext","values","errors","touched","required","value","undefined","minLength","length","Form","submitCaption","children","validationRules","setValues","setErrors","setTouched","validate","fieldName","rules","Array","isArray","fieldErrors","forEach","rule","error","validator","arg","push","newErrors","handleSubmit","e","preventDefault","validateForm","setValue"],"mappings":"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","sourcesContent":["import React, { FC, useState, createContext, FormEvent } from 'react';\r\nimport { PrimaryButton, gray5, gray6 } from './Styles';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nexport interface Values {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Errors {\r\n  [key: string]: string[];\r\n}\r\n\r\nexport interface Touched {\r\n  [key: string]: boolean;\r\n}\r\n\r\ninterface FormContextProps {\r\n  values: Values;\r\n  setValue?: (fieldName: string, value: any) => void;\r\n  errors: Errors;\r\n  validate?: (fieldName: string) => void;\r\n  touched: Touched;\r\n  setTouched?: (fieldName: string) => void;\r\n}\r\n\r\ninterface Props {\r\n  submitCaption?: string;\r\n  validationRules?: ValidationProp;\r\n}\r\n\r\nexport const FormContext = createContext<FormContextProps>({\r\n  values: {},\r\n  errors: {},\r\n  touched: {},\r\n});\r\n\r\ntype Validator = (value: any, args?: any) => string;\r\n\r\nexport const required: Validator = (value: any): string =>\r\n  value === undefined || value === null || value === ''\r\n    ? 'This must be populated'\r\n    : '';\r\n\r\nexport const minLength: Validator = (value: any, length: number): string =>\r\n  value && value.length < length\r\n    ? `This must be at least ${length} characters`\r\n    : '';\r\n\r\ninterface Validation {\r\n  validator: Validator;\r\n  arg?: any;\r\n}\r\n\r\ninterface ValidationProp {\r\n  [key: string]: Validation | Validation[];\r\n}\r\n\r\nexport const Form: FC<Props> = ({\r\n  submitCaption,\r\n  children,\r\n  validationRules,\r\n}) => {\r\n  const [values, setValues] = useState<Values>({});\r\n  const [errors, setErrors] = useState<Errors>({});\r\n  const [touched, setTouched] = useState<Touched>({});\r\n\r\n  const validate = (fieldName: string): string[] => {\r\n    if (!validationRules) {\r\n      return [];\r\n    }\r\n    if (!validationRules[fieldName]) {\r\n      return [];\r\n    }\r\n    const rules = Array.isArray(validationRules[fieldName])\r\n      ? (validationRules[fieldName] as Validation[])\r\n      : ([validationRules[fieldName]] as Validation[]);\r\n    const fieldErrors: string[] = [];\r\n    rules.forEach((rule) => {\r\n      const error = rule.validator(values[fieldName], rule.arg);\r\n      if (error) {\r\n        fieldErrors.push(error);\r\n      }\r\n    });\r\n    const newErrors = { ...errors, [fieldName]: fieldErrors };\r\n    setErrors(newErrors);\r\n    return fieldErrors;\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (validateForm()) {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContext.Provider\r\n      value={{\r\n        values,\r\n        setValue: (fieldName: string, value: any) => {\r\n          setValues({ ...values, [fieldName]: value });\r\n        },\r\n        errors,\r\n        validate,\r\n        touched,\r\n        setTouched: (fieldName: string) => {\r\n          setTouched({ ...touched, [fieldName]: true });\r\n        },\r\n      }}\r\n    >\r\n      <form noValidate={true} onSubmit={handleSubmit}>\r\n        <fieldset\r\n          css={css`\r\n            margin: 10px auto 0 auto;\r\n            padding: 30px;\r\n            width: 350px;\r\n            background-color: ${gray6};\r\n            border-radius: 4px;\r\n            border: 1px solid ${gray5};\r\n            box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n          `}\r\n        >\r\n          {children}\r\n          <div\r\n            css={css`\r\n              margin: 30px 0px 0px 0px;\r\n              padding: 20px 0px 0px 0px;\r\n              border-top: 1px solid ${gray5};\r\n            `}\r\n          >\r\n            <PrimaryButton type=\"submit\">{submitCaption}</PrimaryButton>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </FormContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}