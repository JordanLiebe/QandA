{"ast":null,"code":"const questions = [{\n  questionId: 1,\n  title: 'Why should I learn TypeScript?',\n  content: 'Typescript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\n  userName: 'Bob',\n  created: new Date(),\n  answers: [{\n    answerId: 1,\n    content: 'To catch problems earlier speeding up your developments',\n    userName: 'Jane',\n    created: new Date()\n  }, {\n    answerId: 2,\n    content: 'So, that you can use the JavaScript features of tomorrow, today',\n    userName: 'Fred',\n    created: new Date()\n  }]\n}, {\n  questionId: 2,\n  title: 'Which state management tool should I use?',\n  content: 'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\n  userName: 'Bob',\n  created: new Date(),\n  answers: []\n}];\nexport const getQuestion = async questionId => {\n  await wait(500);\n  const results = questions.filter(q => q.questionId === questionId);\n  return results.length === 0 ? null : results[0];\n};\nexport const getUnansweredQuestions = async () => {\n  await wait(500);\n  return questions.filter(q => q.answers.length === 0);\n};\nexport const searchQuestions = async criteria => {\n  await wait(500);\n  return questions.filter(q => q.title.toLowerCase().indexOf(criteria.toLowerCase()) >= 0 || q.content.toLowerCase().indexOf(criteria.toLowerCase()) >= 0);\n};\n\nconst wait = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const postQuestion = async question => {\n  await wait(500);\n  const questionId = Math.max(...questions.map(q => q.questionId)) + 1;\n  const newQuestion = { ...question,\n    questionId,\n    answers: []\n  };\n  questions.push(newQuestion);\n  return newQuestion;\n};","map":{"version":3,"sources":["C:/Users/Jordan.Liebe/Repos/QandA/frontend/src/QuestionData.ts"],"names":["questions","questionId","title","content","userName","created","Date","answers","answerId","getQuestion","wait","results","filter","q","length","getUnansweredQuestions","searchQuestions","criteria","toLowerCase","indexOf","ms","Promise","resolve","setTimeout","postQuestion","question","Math","max","map","newQuestion","push"],"mappings":"AAgBA,MAAMA,SAAyB,GAAG,CAChC;AACEC,EAAAA,UAAU,EAAE,CADd;AAEEC,EAAAA,KAAK,EAAE,gCAFT;AAGEC,EAAAA,OAAO,EACL,2IAJJ;AAKEC,EAAAA,QAAQ,EAAE,KALZ;AAMEC,EAAAA,OAAO,EAAE,IAAIC,IAAJ,EANX;AAOEC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,QAAQ,EAAE,CADZ;AAEEL,IAAAA,OAAO,EAAE,yDAFX;AAGEC,IAAAA,QAAQ,EAAE,MAHZ;AAIEC,IAAAA,OAAO,EAAE,IAAIC,IAAJ;AAJX,GADO,EAOP;AACEE,IAAAA,QAAQ,EAAE,CADZ;AAEEL,IAAAA,OAAO,EACL,iEAHJ;AAIEC,IAAAA,QAAQ,EAAE,MAJZ;AAKEC,IAAAA,OAAO,EAAE,IAAIC,IAAJ;AALX,GAPO;AAPX,CADgC,EAwBhC;AACEL,EAAAA,UAAU,EAAE,CADd;AAEEC,EAAAA,KAAK,EAAE,2CAFT;AAGEC,EAAAA,OAAO,EACL,oHAJJ;AAKEC,EAAAA,QAAQ,EAAE,KALZ;AAMEC,EAAAA,OAAO,EAAE,IAAIC,IAAJ,EANX;AAOEC,EAAAA,OAAO,EAAE;AAPX,CAxBgC,CAAlC;AAmCA,OAAO,MAAME,WAAW,GAAG,MACzBR,UADyB,IAEQ;AACjC,QAAMS,IAAI,CAAC,GAAD,CAAV;AACA,QAAMC,OAAO,GAAGX,SAAS,CAACY,MAAV,CAAkBC,CAAD,IAAOA,CAAC,CAACZ,UAAF,KAAiBA,UAAzC,CAAhB;AACA,SAAOU,OAAO,CAACG,MAAR,KAAmB,CAAnB,GAAuB,IAAvB,GAA8BH,OAAO,CAAC,CAAD,CAA5C;AACD,CANM;AAQP,OAAO,MAAMI,sBAAsB,GAAG,YAAqC;AACzE,QAAML,IAAI,CAAC,GAAD,CAAV;AACA,SAAOV,SAAS,CAACY,MAAV,CAAkBC,CAAD,IAAOA,CAAC,CAACN,OAAF,CAAUO,MAAV,KAAqB,CAA7C,CAAP;AACD,CAHM;AAKP,OAAO,MAAME,eAAe,GAAG,MAC7BC,QAD6B,IAED;AAC5B,QAAMP,IAAI,CAAC,GAAD,CAAV;AACA,SAAOV,SAAS,CAACY,MAAV,CACJC,CAAD,IACEA,CAAC,CAACX,KAAF,CAAQgB,WAAR,GAAsBC,OAAtB,CAA8BF,QAAQ,CAACC,WAAT,EAA9B,KAAyD,CAAzD,IACAL,CAAC,CAACV,OAAF,CAAUe,WAAV,GAAwBC,OAAxB,CAAgCF,QAAQ,CAACC,WAAT,EAAhC,KAA2D,CAHxD,CAAP;AAKD,CATM;;AAWP,MAAMR,IAAI,GAAIU,EAAD,IAA+B;AAC1C,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACD,CAFD;;AAWA,OAAO,MAAMI,YAAY,GAAG,MAC1BC,QAD0B,IAEY;AACtC,QAAMf,IAAI,CAAC,GAAD,CAAV;AACA,QAAMT,UAAU,GAAGyB,IAAI,CAACC,GAAL,CAAS,GAAG3B,SAAS,CAAC4B,GAAV,CAAef,CAAD,IAAOA,CAAC,CAACZ,UAAvB,CAAZ,IAAkD,CAArE;AACA,QAAM4B,WAAyB,GAAG,EAAE,GAAGJ,QAAL;AAAexB,IAAAA,UAAf;AAA2BM,IAAAA,OAAO,EAAE;AAApC,GAAlC;AACAP,EAAAA,SAAS,CAAC8B,IAAV,CAAeD,WAAf;AACA,SAAOA,WAAP;AACD,CARM","sourcesContent":["export interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nconst questions: QuestionData[] = [\r\n  {\r\n    questionId: 1,\r\n    title: 'Why should I learn TypeScript?',\r\n    content:\r\n      'Typescript seems to be getting popular so I wondered whether it is worth my time learning it? What benefits does it give over JavaScript?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [\r\n      {\r\n        answerId: 1,\r\n        content: 'To catch problems earlier speeding up your developments',\r\n        userName: 'Jane',\r\n        created: new Date(),\r\n      },\r\n      {\r\n        answerId: 2,\r\n        content:\r\n          'So, that you can use the JavaScript features of tomorrow, today',\r\n        userName: 'Fred',\r\n        created: new Date(),\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    questionId: 2,\r\n    title: 'Which state management tool should I use?',\r\n    content:\r\n      'There seem to be a fair few state management tools around for React - React, Unstated, ... Which one should I use?',\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n];\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  await wait(500);\r\n  const results = questions.filter((q) => q.questionId === questionId);\r\n  return results.length === 0 ? null : results[0];\r\n};\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  await wait(500);\r\n  return questions.filter((q) => q.answers.length === 0);\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  criteria: string,\r\n): Promise<QuestionData[]> => {\r\n  await wait(500);\r\n  return questions.filter(\r\n    (q) =>\r\n      q.title.toLowerCase().indexOf(criteria.toLowerCase()) >= 0 ||\r\n      q.content.toLowerCase().indexOf(criteria.toLowerCase()) >= 0,\r\n  );\r\n};\r\n\r\nconst wait = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  await wait(500);\r\n  const questionId = Math.max(...questions.map((q) => q.questionId)) + 1;\r\n  const newQuestion: QuestionData = { ...question, questionId, answers: [] };\r\n  questions.push(newQuestion);\r\n  return newQuestion;\r\n};\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}