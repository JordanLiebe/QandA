{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jordan.Liebe\\\\Repos\\\\QandA\\\\frontend\\\\src\\\\QuestionPage.tsx\";\nimport { useState, Fragment, useEffect } from 'react';\nimport { Page } from './Page';\nimport { getQuestion } from './QuestionData';\n/** @jsx jsx */\n\nimport { css, jsx } from '@emotion/core';\nimport { gray6 } from './Styles';\nexport const QuestionPage = ({\n  match\n}) => {\n  const [question, setQuestion] = useState(null);\n  useEffect(() => {\n    const doGetQuestion = async questionId => {\n      const foundQuestion = await getQuestion(questionId);\n      setQuestion(foundQuestion);\n    };\n\n    if (match.params.questionId) {\n      const questionId = Number(match.params.questionId);\n      doGetQuestion(questionId);\n    }\n  }, [match.params.questionId]);\n  return jsx(Page, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, jsx(\"div\", {\n    css: css`\n          background-color: white;\n          padding: 15px 20px 20px 20px;\n          border-radius: 4px;\n          border: 1px solid ${gray6};\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, question === null ? '' : question.title), question !== null && jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, jsx(\"p\", {\n    css: css`\n              margin-top: 0px;\n              background-color: white;\n            `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, question.content), jsx(\"div\", {\n    css: css`\n              font-size: 12px;\n            `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  })));\n};\n{\n  /* <Page>Question Page {match.params.questionId}</Page> */\n}","map":{"version":3,"sources":["C:/Users/Jordan.Liebe/Repos/QandA/frontend/src/QuestionPage.tsx"],"names":["useState","Fragment","useEffect","Page","getQuestion","css","jsx","gray6","QuestionPage","match","question","setQuestion","doGetQuestion","questionId","foundQuestion","params","Number","title","content"],"mappings":";AAAA,SAAoBA,QAApB,EAA8BC,QAA9B,EAAwCC,SAAxC,QAAyD,OAAzD;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,SAAuBC,WAAvB,QAA0C,gBAA1C;AACA;;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,eAAzB;AACA,SAAgBC,KAAhB,QAA6B,UAA7B;AAMA,OAAO,MAAMC,YAAkD,GAAG,CAAC;AACjEC,EAAAA;AADiE,CAAD,KAE5D;AACJ,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAsB,IAAtB,CAAxC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,aAAa,GAAG,MAAOC,UAAP,IAA8B;AAClD,YAAMC,aAAa,GAAG,MAAMV,WAAW,CAACS,UAAD,CAAvC;AACAF,MAAAA,WAAW,CAACG,aAAD,CAAX;AACD,KAHD;;AAIA,QAAIL,KAAK,CAACM,MAAN,CAAaF,UAAjB,EAA6B;AAC3B,YAAMA,UAAU,GAAGG,MAAM,CAACP,KAAK,CAACM,MAAN,CAAaF,UAAd,CAAzB;AACAD,MAAAA,aAAa,CAACC,UAAD,CAAb;AACD;AACF,GATQ,EASN,CAACJ,KAAK,CAACM,MAAN,CAAaF,UAAd,CATM,CAAT;AAWA,SACE,IAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAER,GAAI;;;;8BAIaE,KAAM;;SAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGG,QAAQ,KAAK,IAAb,GAAoB,EAApB,GAAyBA,QAAQ,CAACO,KATrC,CADF,EAYGP,QAAQ,KAAK,IAAb,IACC,IAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEL,GAAI;;;aADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGK,QAAQ,CAACQ,OANZ,CADF,EASE;AACE,IAAA,GAAG,EAAEb,GAAI;;aADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CAbJ,CADF;AAgCD,CAhDM;AAkDP;AACE;AACD","sourcesContent":["import React, { FC, useState, Fragment, useEffect } from 'react';\r\nimport { Page } from './Page';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { QuestionData, getQuestion } from './QuestionData';\r\n/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { gray3, gray6 } from './Styles';\r\n\r\ninterface RouteParams {\r\n  questionId: string;\r\n}\r\n\r\nexport const QuestionPage: FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n}) => {\r\n  const [question, setQuestion] = useState<QuestionData | null>(null);\r\n\r\n  useEffect(() => {\r\n    const doGetQuestion = async (questionId: number) => {\r\n      const foundQuestion = await getQuestion(questionId);\r\n      setQuestion(foundQuestion);\r\n    };\r\n    if (match.params.questionId) {\r\n      const questionId = Number(match.params.questionId);\r\n      doGetQuestion(questionId);\r\n    }\r\n  }, [match.params.questionId]);\r\n\r\n  return (\r\n    <Page>\r\n      <div\r\n        css={css`\r\n          background-color: white;\r\n          padding: 15px 20px 20px 20px;\r\n          border-radius: 4px;\r\n          border: 1px solid ${gray6};\r\n          box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n        `}\r\n      >\r\n        {question === null ? '' : question.title}\r\n      </div>\r\n      {question !== null && (\r\n        <Fragment>\r\n          <p\r\n            css={css`\r\n              margin-top: 0px;\r\n              background-color: white;\r\n            `}\r\n          >\r\n            {question.content}\r\n          </p>\r\n          <div\r\n            css={css`\r\n              font-size: 12px;\r\n            `}\r\n          ></div>\r\n        </Fragment>\r\n      )}\r\n    </Page>\r\n  );\r\n};\r\n\r\n{\r\n  /* <Page>Question Page {match.params.questionId}</Page> */\r\n}\r\n"]},"metadata":{},"sourceType":"module"}